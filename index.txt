<!DOCTYPE html>
<html>
<head>
    <title>Chrome Session Viewer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            margin: 0;
            background-color: #f5f5f5;
        }

        h1 {
            margin-bottom: 20px;
        }

        .controls {
            margin-bottom: 20px;
        }

        input {
            padding: 8px;
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        button {
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 0 5px;
        }

        button:hover {
            background-color: #0056b3;
        }

        .streams {
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .stream-container {
            text-align: center;
        }

        .stream {
            width: 800px;
            height: 600px;
            border: 1px solid #ddd;
            background-color: white;
            margin-bottom: 10px;
            border-radius: 4px;
        }

        .status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 4px;
            background-color: #dc3545;
            color: white;
            font-size: 14px;
        }

        .status.connected {
            background-color: #28a745;
        }
    </style>
</head>
<body>
    <h1>Chrome Session Viewer</h1>

    <div class="controls">
        <input type="text" id="sessionId" placeholder="Enter Session ID">
        <button onclick="startInteractive()">Start Interactive</button>
        <button onclick="startViewOnly()">Start View-Only</button>
    </div>

    <div class="streams">
        <div class="stream-container">
            <h3>Interactive Stream</h3>
            <img id="interactiveStream" class="stream" alt="Interactive Stream" tabindex="0">
            <div id="interactiveStatus" class="status">Disconnected</div>
        </div>
        <div class="stream-container">
            <h3>View-Only Stream</h3>
            <img id="viewOnlyStream" class="stream" alt="View-Only Stream">
            <div id="viewOnlyStatus" class="status">Disconnected</div>
        </div>
    </div>

    <script>
        let interactiveSocket = null;
        let viewOnlySocket = null;

        function startInteractive() {
            if (interactiveSocket) {
                interactiveSocket.close();
            }

            const sessionId = document.getElementById('sessionId').value;
            if (!sessionId) {
                alert('Please enter a session ID');
                return;
            }

            interactiveSocket = new WebSocket(`wss://headfulbrowser.azurewebsites.net/session/${sessionId}/stream?mode=interactive`);
            const statusEl = document.getElementById('interactiveStatus');
            const streamEl = document.getElementById('interactiveStream');

            interactiveSocket.binaryType = 'blob';

            interactiveSocket.onopen = () => {
                statusEl.textContent = 'Connected';
                statusEl.classList.add('connected');
                streamEl.focus();
            };

            interactiveSocket.onclose = () => {
                statusEl.textContent = 'Disconnected';
                statusEl.classList.remove('connected');
            };

            interactiveSocket.onmessage = (event) => {
                if (event.data instanceof Blob) {
                    const url = URL.createObjectURL(event.data);
                    streamEl.onload = () => URL.revokeObjectURL(url);
                    streamEl.src = url;
                }
            };

            setupInteractiveControls();
        }

        function setupInteractiveControls() {
            const stream = document.getElementById('interactiveStream');
            
            stream.addEventListener('click', (e) => {
                if (!interactiveSocket || interactiveSocket.readyState !== WebSocket.OPEN) return;

                const rect = e.target.getBoundingClientRect();
                const clickX = e.clientX - rect.left;
                const clickY = e.clientY - rect.top;
                const scaleX = e.target.naturalWidth / rect.width;
                const scaleY = e.target.naturalHeight / rect.height;
                
                const x = clickX * scaleX;
                const y = clickY * scaleY;

                interactiveSocket.send(JSON.stringify({
                    type: 'mouse',
                    x: Math.round(x),
                    y: Math.round(y)
                }));
            });

            stream.addEventListener('keydown', (e) => {
                if (!interactiveSocket || interactiveSocket.readyState !== WebSocket.OPEN) return;
                
                const keyData = {
                    type: 'keyboard',
                    key: e.key
                };

                interactiveSocket.send(JSON.stringify(keyData));
                e.preventDefault();
            });

            stream.tabIndex = 0;
        }

        function startViewOnly() {
            if (viewOnlySocket) {
                viewOnlySocket.close();
            }

            const sessionId = document.getElementById('sessionId').value;
            if (!sessionId) {
                alert('Please enter a session ID');
                return;
            }

            viewOnlySocket = new WebSocket(`wss://headfulbrowser.azurewebsites.net/session/${sessionId}/stream?mode=view-only`);
            const statusEl = document.getElementById('viewOnlyStatus');
            const streamEl = document.getElementById('viewOnlyStream');

            viewOnlySocket.binaryType = 'blob';

            viewOnlySocket.onopen = () => {
                statusEl.textContent = 'Connected';
                statusEl.classList.add('connected');
            };

            viewOnlySocket.onclose = () => {
                statusEl.textContent = 'Disconnected';
                statusEl.classList.remove('connected');
            };

            viewOnlySocket.onmessage = (event) => {
                if (event.data instanceof Blob) {
                    const url = URL.createObjectURL(event.data);
                    streamEl.onload = () => URL.revokeObjectURL(url);
                    streamEl.src = url;
                }
            };
        }

        window.addEventListener('beforeunload', () => {
            if (interactiveSocket) interactiveSocket.close();
            if (viewOnlySocket) viewOnlySocket.close();
        });
    </script>
</body>
</html>